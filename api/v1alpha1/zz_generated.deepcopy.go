/*
 * This file is part of the KubeVirt Redfish project
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * Copyright 2025 KubeVirt Redfish project and its authors.
 *
 */

// Code generated by controller-gen. DO NOT EDIT.

package v1alpha1

import (
	v1 "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	runtime "k8s.io/apimachinery/pkg/runtime"
)

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedfishAuthSpec) DeepCopyInto(out *RedfishAuthSpec) {
	*out = *in
	if in.Users != nil {
		in, out := &in.Users, &out.Users
		*out = make([]RedfishUserSpec, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedfishAuthSpec.
func (in *RedfishAuthSpec) DeepCopy() *RedfishAuthSpec {
	if in == nil {
		return nil
	}
	out := new(RedfishAuthSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedfishChassisSpec) DeepCopyInto(out *RedfishChassisSpec) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedfishChassisSpec.
func (in *RedfishChassisSpec) DeepCopy() *RedfishChassisSpec {
	if in == nil {
		return nil
	}
	out := new(RedfishChassisSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedfishMonitoringSpec) DeepCopyInto(out *RedfishMonitoringSpec) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedfishMonitoringSpec.
func (in *RedfishMonitoringSpec) DeepCopy() *RedfishMonitoringSpec {
	if in == nil {
		return nil
	}
	out := new(RedfishMonitoringSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedfishServer) DeepCopyInto(out *RedfishServer) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ObjectMeta.DeepCopyInto(&out.ObjectMeta)
	in.Spec.DeepCopyInto(&out.Spec)
	in.Status.DeepCopyInto(&out.Status)
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedfishServer.
func (in *RedfishServer) DeepCopy() *RedfishServer {
	if in == nil {
		return nil
	}
	out := new(RedfishServer)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *RedfishServer) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedfishServerList) DeepCopyInto(out *RedfishServerList) {
	*out = *in
	out.TypeMeta = in.TypeMeta
	in.ListMeta.DeepCopyInto(&out.ListMeta)
	if in.Items != nil {
		in, out := &in.Items, &out.Items
		*out = make([]RedfishServer, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedfishServerList.
func (in *RedfishServerList) DeepCopy() *RedfishServerList {
	if in == nil {
		return nil
	}
	out := new(RedfishServerList)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyObject is an autogenerated deepcopy function, copying the receiver, creating a new runtime.Object.
func (in *RedfishServerList) DeepCopyObject() runtime.Object {
	if c := in.DeepCopy(); c != nil {
		return c
	}
	return nil
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedfishServerSpec) DeepCopyInto(out *RedfishServerSpec) {
	*out = *in
	if in.Chassis != nil {
		in, out := &in.Chassis, &out.Chassis
		*out = make([]RedfishChassisSpec, len(*in))
		copy(*out, *in)
	}
	in.Authentication.DeepCopyInto(&out.Authentication)
	out.TLS = in.TLS
	out.Monitoring = in.Monitoring
	if in.Resources != nil {
		in, out := &in.Resources, &out.Resources
		*out = new(v1.ResourceRequirements)
		(*in).DeepCopyInto(*out)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedfishServerSpec.
func (in *RedfishServerSpec) DeepCopy() *RedfishServerSpec {
	if in == nil {
		return nil
	}
	out := new(RedfishServerSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedfishServerStatus) DeepCopyInto(out *RedfishServerStatus) {
	*out = *in
	if in.Conditions != nil {
		in, out := &in.Conditions, &out.Conditions
		*out = make([]metav1.Condition, len(*in))
		for i := range *in {
			(*in)[i].DeepCopyInto(&(*out)[i])
		}
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedfishServerStatus.
func (in *RedfishServerStatus) DeepCopy() *RedfishServerStatus {
	if in == nil {
		return nil
	}
	out := new(RedfishServerStatus)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedfishTLSSpec) DeepCopyInto(out *RedfishTLSSpec) {
	*out = *in
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedfishTLSSpec.
func (in *RedfishTLSSpec) DeepCopy() *RedfishTLSSpec {
	if in == nil {
		return nil
	}
	out := new(RedfishTLSSpec)
	in.DeepCopyInto(out)
	return out
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *RedfishUserSpec) DeepCopyInto(out *RedfishUserSpec) {
	*out = *in
	if in.Chassis != nil {
		in, out := &in.Chassis, &out.Chassis
		*out = make([]string, len(*in))
		copy(*out, *in)
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new RedfishUserSpec.
func (in *RedfishUserSpec) DeepCopy() *RedfishUserSpec {
	if in == nil {
		return nil
	}
	out := new(RedfishUserSpec)
	in.DeepCopyInto(out)
	return out
}
